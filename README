OVERVIEW

A command line program for controlling BlinkM leds connected 
to the I2C-3 bus of a Gumstix Overo expansion board.

If you are only interested in userland i2c programming from an 
Overo, ignore main.c since that is only about hacking a cli for 
the BlinkMs, unrelated to anything you probably care about.
The i2c_functions and i2c_blinkm files are more what you want
to see.

I open and close the /dev/i2c-3 file on every invocation since
this is a cli program. You don't necessarily need or want to do
this if you are writing a daemon. Likewise with the I2C_SLAVE
ioctl calls if you only have one device you are talking to.

The schematic has the Sparkfun part numbers available when I built
this. They may have changed. It does show how to wire up the level 
converter which can be a little confusing for us software guys.

The cross makefile can be used as template for other projects that 
want to cross-compile using the OE built tools but without using 
bitbake.  


BUILDING

There are make files for building the project natively on
the gumstix or as a cross-build on another machine configured
to build software with OpenEmbedded.

The cross-build makefile assumes the cross-tools have been 
setup in gumstix OE standard locations.

From the project directory run 

make -f Makefile-cross

or 

make -f Makefile-native

depending on whether you are building on a development machine
or the Gumstix respectivelly.


RUNNING

You will need to change permissions for /dev/i2c-3 if you
are running the program as someone other then root.

A one-time fix is to run the following as root

chmod 0666 /dev/i2c-3

udev will overwrite this on your next boot though.

Run the program without arguments to get the available commands.

$ ./blinkm

Usage: blinkm <command> <args>

The led address is optional and defaults to 0x09.
Use a comma separated list to address multiple devices in one command.
The color arguments are optional and default to zero.

Available Commands
	find-leds 
	set-rgb [-d led] [-r red] [-g green] [-b blue]
	get-rgb [-d led]
	fade-rgb [-d led] [-r red] [-g green] [-b blue]
	fade-hsb [-d led] [-h hue] [-s saturation] [-b brightness]
	fade-random-rgb [-d led] [-r red] [-g green] [-b blue]
	fade-random-hsb [-d led] [-h hue] [-s saturation] [-b brightness]
	play-script [-d led] -s <script id or name> -n num_repeats
	stop-script [-d led]
	set-fade-speed [-d led] -f speed
	set-time-adjust [-d led] -t adjust
	show-scripts 
	read-script [-d led]
	write-script-line [-d led] -n line_no -t ticks -c cmd -a arg1[,arg2[,arg3]]
	set-script-length-and-repeats [-d led] -l length -n repeats
	set-address -d new_led_address


The first command you probably want to run is find-leds.

$ ./blinkm find-leds

Scanning I2C bus for BlinkM devices...
Found a BlinkM at address 1 (0x01)
Found a BlinkM at address 2 (0x02)
Found a BlinkM at address 3 (0x03)
Found a BlinkM at address 4 (0x04)
Found 4 devices




TODO

1. Write script function hasn't been tested much.

2. Need to recover the bus after the command to change an led address.
   Right now you need to power cycle the led which is okay, but you
   also need to power cycle the overo or the i2c bus stays hung.
   
3. GetAddress is not implemented. Investigate if i2c broadcasts are
   possible with the overos. 

4. Add code to read in scripts from a file.
